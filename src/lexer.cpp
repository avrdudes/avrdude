#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 104
#define YY_END_OF_BUFFER 105
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1217] =
    {   0,
        1,    1,  105,  103,  101,  100,  101,  103,  103,   96,
       91,   98,   99,   94,   92,   86,   93,  103,   95,    1,
        1,   88,   87,    1,    1,  103,    1,    1,    1,  103,
      103,    1,    1,   90,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,   89,   97,  101,  101,    0,    0,
        3,    0,    0,    6,    0,    0,    0,    0,    0,    2,
        7,    1,    0,    0,    1,    1,    1,    1,    0,    1,
        1,    1,    1,    1,    1,    1,    1,    0,    1,    0,
        1,    1,    1,    1,    1,    0,    0,    0,    1,    1,

        1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  102,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   39,    0,   40,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    9,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    6,    0,    0,    0,    1,    1,    1,
        1,    1,    0,    2,    1,    1,    1,    0,    1,    0,
        2,    1,    2,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    8,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   66,   67,   68,    0,    0,
        0,   71,    0,    0,    0,    0,    0,   72,   73,   74,
        0,   75,    0,    0,    0,   77,    0,   80,    0,    0,
        0,    0,    0,    2,    1,    1,    1,    1,    1,    1,

        1,    2,    1,    1,    0,    1,    1,    0,    0,   50,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       14,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   48,   49,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   54,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       60,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   76,    0,    0,    0,    0,    0,    0,    0,
        0,    1,    1,    1,    0,    1,    0,    2,    1,    1,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   10,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   30,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   64,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   82,    0,
        0,    0,    2,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   26,    0,   29,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       47,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   53,    0,   56,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   59,    0,    0,    0,    0,
        0,    0,   69,    0,    0,    0,    0,    0,    0,    0,
        0,   78,    0,    0,    0,   81,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    9,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   34,   35,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   61,   62,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    2,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   33,   36,    0,    0,
        0,    0,    0,    0,    0,   42,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   52,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   63,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   79,   83,   84,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       17,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   43,    0,    0,    0,    0,    0,    0,    0,    0,
       51,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   70,    0,    0,    0,    0,
        0,   85,    0,    0,    0,    9,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   15,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   25,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   55,    0,    0,    0,    0,    0,
       58,    0,    0,    8,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   23,    0,    0,    0,
        0,   31,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   45,   46,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   65,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   27,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   41,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   32,    0,    0,
        0,    0,    0,    0,    0,   44,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   22,    0,
        0,    0,    0,    0,   38,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   11,    0,    0,    0,    0,    0,
        0,   16,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   57,    0,    0,    0,    0,    0,    0,    0,
        0,   18,   19,    0,   20,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   24,    0,    0,   37,    0,
        0,    0,    0,    0,    0,    0,   21,    0,    0,    0,
        0,    0,    0,    8,    0,    0,    0,    0,   13,    0,

        0,    0,    0,   28,    0,    0,   12,    5,    0,    0,
        0,    0,    0,    0,    4,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    1,    8,    9,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   22,   22,   24,   25,   26,   27,    1,
       28,    1,    1,    1,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,    1,   39,   40,   41,   42,   43,
        1,   44,   45,   46,   47,   48,   49,   50,   51,    1,
        1,   52,    1,   53,   54,    1,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,    1,   71,   72,   73,   74,   75,   76,   77,
       78,   79,    1,   80,    1,   81,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[82] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    1,    4,    4,    4,
        4,    4,    4,    4,    4,    1,    1,    1,    5,    5,
        5,    5,    4,    5,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    6,
        1,    1,    1,    1,    5,    5,    5,    5,    4,    5,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    6,    1,    1,    1,
        1
    } ;

static const flex_int16_t yy_base[1223] =
    {   0,
        0,    0, 1742, 1743,   80, 1743,   84,   77, 1738, 1743,
     1743, 1743, 1743, 1743,  114, 1743,    0,   72, 1728,  167,
      229, 1743, 1743,   67,   71, 1710,   72,   64,  110,   71,
     1698, 1700,  115, 1743,   50,   90,  105, 1677,   98,  115,
       48,  152,  139,  150,  203,  116,  214,  140,  235,  249,
     1663,  170, 1663, 1674, 1743, 1743,  233,  259, 1729,  190,
     1743, 1728, 1727,  141,  310,  264,  324,  143,  149,  340,
     1743,  384,  109,  356,  263,  345,  154,  350, 1713,    0,
      387,  348,  223,  252, 1691,  397,  401, 1682, 1689,  221,
     1743,  267,  422,  426,  446,  175, 1686, 1670, 1686,  219,

      274,  152, 1649, 1650, 1646, 1646, 1649, 1648, 1696, 1655,
     1641, 1743, 1650, 1654, 1643,  355,  189, 1642, 1654, 1637,
     1634,  414, 1651, 1633,  401, 1633,  292, 1743, 1649, 1629,
     1633, 1645, 1622, 1624, 1630,  198,  164,  428, 1743, 1629,
     1628, 1636, 1633,  248, 1625,  325, 1637,  297, 1631, 1618,
     1621, 1609,  266, 1621,   42, 1614,  275,  305,  387,  322,
     1619,  319, 1616, 1610, 1620, 1606, 1609, 1622, 1606, 1619,
     1597, 1611, 1601, 1669, 1666, 1654,  487,  452,  450,  367,
      456,  501,  511,  531, 1743,  331,  400,    0,  523, 1615,
      427,  540, 1743, 1629,  562, 1612, 1597, 1596,  457, 1606,

     1596, 1605, 1588, 1743, 1600, 1600, 1588, 1598, 1588, 1592,
     1599, 1598, 1595, 1588, 1579, 1578, 1590, 1591, 1580, 1574,
     1571, 1571, 1579, 1569, 1586, 1571, 1579, 1567, 1566, 1562,
      224, 1577, 1559, 1574, 1577,  117, 1561, 1575, 1559, 1568,
     1563, 1556, 1556, 1568, 1553, 1567, 1566,  299, 1547, 1559,
      468,  459, 1551, 1543, 1556, 1557, 1555, 1551, 1537, 1541,
     1539, 1542, 1549, 1547, 1534, 1743, 1743, 1743, 1541, 1535,
     1543, 1743, 1544, 1544, 1576, 1541, 1540, 1743, 1743, 1743,
     1537, 1743, 1534, 1535, 1534,  506, 1529, 1743, 1525, 1517,
     1546,  522,  603,  611, 1743,  481,  503,  601,  572,  500,

      604,  514,  603,  605,  665,  513,  655,  568,  542, 1743,
     1540, 1539, 1541, 1539, 1552, 1540, 1539, 1538, 1540, 1530,
     1519, 1505, 1500, 1519, 1555, 1499, 1501, 1516, 1505, 1515,
     1743, 1510,  228, 1490, 1507, 1508, 1490, 1485, 1505, 1492,
     1494, 1500, 1503, 1488, 1497, 1489, 1492,  583, 1480, 1497,
      177, 1493, 1475,  507, 1490, 1486, 1470,  433, 1470, 1489,
     1486, 1472, 1466, 1743, 1743, 1472, 1467, 1478, 1467, 1467,
     1480, 1479, 1475, 1474,  601, 1466, 1463, 1743, 1471, 1470,
      597, 1470, 1456, 1457, 1466,  547, 1466, 1463, 1443, 1462,
      639, 1447, 1441, 1463, 1462, 1445, 1457, 1496, 1451, 1452,

     1442, 1444, 1743, 1450,  362, 1440,  385, 1452, 1447, 1446,
      625, 1743,  606,  635,  684, 1743,  710,  718,  656,  657,
     1462, 1456,  515,  661, 1458,  551, 1458, 1471, 1462, 1458,
     1460, 1464, 1462, 1431, 1437, 1743,  591, 1437, 1473, 1432,
     1434, 1416, 1415, 1414, 1426, 1425, 1412, 1423, 1424, 1425,
     1413, 1419, 1410, 1417, 1417, 1420, 1402, 1394, 1417, 1411,
     1396, 1410, 1397, 1396, 1406, 1389, 1406, 1395, 1398, 1405,
     1434, 1387, 1386, 1399, 1394, 1395, 1398, 1381, 1396, 1372,
     1378, 1375, 1388, 1387, 1387, 1389, 1388, 1387, 1366, 1367,
     1367, 1372, 1364, 1368, 1377, 1366, 1374, 1377, 1372, 1361,

     1361, 1362, 1360, 1357, 1370, 1355, 1363, 1364,  596, 1366,
     1357, 1361, 1364, 1351, 1343, 1356, 1396,  549, 1352, 1338,
     1352, 1335, 1351, 1339, 1339, 1348, 1337, 1346,  656, 1359,
     1360,  726,  734, 1356, 1366, 1355, 1369,  714, 1376, 1353,
     1352, 1359, 1356, 1357, 1320, 1316, 1317, 1314, 1313, 1332,
     1326, 1311, 1318, 1319, 1322, 1314, 1308, 1323, 1319, 1303,
     1302, 1301, 1316, 1318, 1301, 1743, 1310, 1291, 1314, 1304,
     1310, 1310, 1301, 1300, 1304, 1290, 1301, 1290, 1300, 1303,
     1290, 1337, 1333, 1290, 1274, 1281, 1273, 1288, 1285, 1275,
     1743, 1283, 1291, 1273, 1289, 1288, 1280, 1268, 1267, 1275,

     1278, 1743, 1281, 1743, 1277, 1261, 1267, 1266, 1271, 1257,
     1274, 1259, 1269, 1259, 1271, 1743, 1261, 1254, 1265, 1242,
     1261, 1249, 1263, 1243, 1250, 1261, 1236, 1244, 1258, 1238,
     1235, 1743, 1251, 1250, 1234, 1743,  650, 1251, 1259, 1269,
     1272, 1268, 1268, 1256,  710, 1279, 1231, 1268, 1237, 1234,
     1220, 1227, 1234, 1233, 1236, 1230, 1209, 1230, 1231, 1230,
     1212, 1224, 1219, 1222, 1226, 1210, 1215, 1222, 1217, 1221,
     1211, 1205, 1198, 1210, 1743, 1743, 1207, 1197, 1196, 1199,
     1207,  647, 1193, 1244, 1208, 1205, 1198, 1187, 1200, 1185,
     1198, 1183, 1183, 1183, 1194, 1176, 1192, 1191, 1190, 1169,

     1181, 1190, 1177, 1161,   69,  124,  290,  280,  332,  397,
      409,  702,  414, 1743, 1743,  414,  434,  455,  471,  500,
      515,  548,  546,  604,  604,  625,  609,  639,  645,  643,
      657,  656,  702,  759,  721,  712,  734,  736,  736, 1743,
      734,  708,  736,  726,  720,  711,  724,  720,  723,  722,
      709,  705,  712,  726,  720,  720,  732,  735,  734,  725,
      733,  740,  736,  739,  726,  738, 1743, 1743,  727,  729,
      730,  727,  732,  753,  790, 1743,  744,  745,  743,  759,
      760,  756,  757,  758,  744,  748,  749,  749,  763, 1743,
      757,  747,  756,  767,  749,  770,  760,  771,  773,  758,

      764,  775,  775,  782,  782,  772,  784,  781,  763,  783,
      777,  774,  790,  785,  790,  777, 1743, 1743, 1743,  790,
      818,  822,  823,  809,  800,  801,  810,  820,  812,  822,
      788,  791,  790,  788,  795,  802,  807,  797,  813,  801,
     1743,  816,  809,  818,  815,  816,  804,  818,  805,  823,
      808,  806,  828,  829,  815,  828,  818,  819,  871,  837,
      834, 1743,  839,  833,  842,  843,  841,  830,  846,  839,
     1743,  844,  846,  846,  840,  835,  849,  837,  853,  840,
      839,  843,  836,  843,  846, 1743,  842,  859,  847,  848,
      848, 1743,  889,  883,  892, 1743,  896,  897,  898,  899,

      885,  868,  876,  854,  876,  866,  866,  882,  869,  874,
      861,  886,  870,  872,  878,  876,  879,  878,  887, 1743,
      878,  882,  879,  884,  884,  893,  901,  902,  890,  902,
      891,  899,  945,  906,  893,  908,  904,  899,  911,  912,
      898,  899,  901,  901, 1743,  909,  904,  911,  919,  914,
     1743,  921,  962,  916,  925,  912,  929,  915,  929,  955,
      951,  954,  961,  962,  962,  947,  962,  963,  966,  941,
      940,  934,  934,  944,  937,  948,  941,  942,  942,  937,
      953,  955,  939,  959,  954,  953, 1743,  946,  947,  948,
      946, 1743,  950,  964,  965,  958,  966,  957,  972, 1010,

      974,  972, 1743, 1743,  972,  973,  970,  962,  976,  977,
      982,  965,  984,  970,  970,  970,  971, 1743,  985,  976,
     1009, 1014, 1010, 1011, 1021, 1014,  986,  994,  997,  997,
     1002, 1003,  999,  993,  988, 1002,  984,  992,  998,  988,
     1000,  996, 1013, 1743, 1000, 1011, 1012, 1013, 1014, 1002,
     1009, 1005, 1009, 1743, 1008, 1008, 1014, 1015, 1013, 1011,
     1006, 1030, 1008, 1033, 1017, 1031, 1049, 1047, 1060, 1047,
     1028, 1039, 1037, 1022, 1026, 1033, 1027, 1042, 1032, 1048,
     1035, 1044, 1040, 1052, 1042, 1048, 1038, 1743, 1045, 1046,
     1040, 1059, 1042, 1043, 1044, 1743, 1063, 1064, 1052, 1064,

     1046, 1064, 1087, 1120, 1095, 1055, 1065, 1070, 1067, 1076,
     1069, 1057, 1075, 1062, 1079, 1067, 1079, 1072, 1743, 1069,
     1086, 1087, 1088, 1066, 1743, 1086, 1068, 1069, 1076, 1084,
     1079, 1105, 1120, 1117, 1743, 1081, 1084, 1077, 1079, 1091,
     1096, 1743, 1101, 1096, 1099, 1097, 1097, 1110, 1088, 1089,
     1111, 1098, 1743, 1107, 1134, 1139, 1101, 1102, 1116, 1117,
     1119, 1743, 1743, 1109, 1743, 1120, 1113, 1116, 1109, 1141,
     1150, 1112, 1123, 1118, 1115, 1743, 1118, 1123, 1743, 1132,
     1151, 1156, 1123, 1126, 1122, 1135, 1743, 1135, 1154, 1159,
     1142, 1134, 1130, 1743, 1136, 1202, 1169, 1152, 1743, 1147,

     1202, 1164, 1144, 1743, 1209, 1176, 1743, 1211, 1173, 1175,
     1172, 1215, 1212, 1217, 1218, 1743, 1221, 1227, 1231, 1235,
     1238, 1240
    } ;

static const flex_int16_t yy_def[1223] =
    {   0,
     1216,    1, 1216, 1216, 1216, 1216, 1216, 1217, 1218, 1216,
     1216, 1216, 1216, 1216, 1216, 1216,   15, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1218, 1217,
     1216, 1217, 1218, 1216, 1216, 1219, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1220,   21,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,

     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1221, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1222, 1220, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,

     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1221, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,

     1216, 1222, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,

     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,

     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,

     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,

     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,

     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,

     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,

     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,

     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,

     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216,    0, 1216, 1216, 1216, 1216,
     1216, 1216
    } ;

static const flex_int16_t yy_nxt[1825] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   21,    4,   22,   23,    4,    4,
       24,   25,    4,    4,    4,   26,   27,    4,   28,   29,
       30,    4,   31,    4,    4,    4,    4,   32,    4,   33,
        4,    4,   34,    4,   35,   36,   37,   38,   39,   40,
        4,   41,   42,    4,    4,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,    4,   54,    4,   55,
       56,   57,   61,   58,   57,   58,   59,   58,   58,   70,
       70,   70,   70,   70,   70,   70,   70,   81,   82,   96,

       83,   87,  124,   83,  267,   84,   82,   83,   89,   84,
      268,   85,   90,   92,   85,  102,   86,   97,   85,   91,
       86,   91,  125,  103,  104,   96,  182,  182,   62,   65,
      112,   66,   67,   67,   67,   67,   67,   67,   67,   90,
       93,   94,  794,  174,  105,  100,   83,  175,   84,   95,
       68,   83,  106,  100,   69,  107,  117,   85,  108,   86,
      118,  109,   85,  110,  101,  119,  113,  111,  120,  122,
      360,  114,  142,  115,  121,  143,   68,   96,  795,  361,
      123,   69,   65,   90,   72,   72,   72,   72,   72,   72,
       67,   67,   90,  130,  151,   61,   73,  152,  153,   74,

      185,  131,   75,   96,  133,   76,  134,  132,  135,  126,
       90,   77,  136,   78,  196,  193,   79,  197,  137,  127,
      128,  240,   73,  129,  169,   74,  170,  185,   75,  171,
      467,   96,   76,  468,   57,  241,   58,   57,   77,   59,
       78,   62,  193,   79,   65,  215,   80,   80,   80,   80,
       80,   80,   80,   80,  191,   83,  138,   96,  216,   89,
       58,   74,   58,   58,   75,  238,   85,   76,  144,  239,
       91,  139,   91,   77,  145,   78,  140,  141,  354,   65,
      191,  446,  146,  147,  148,  149,  447,   74,   83,  150,
       75,  154,  155,  156,   76,  355,   74,  157,   77,   85,

       77,   92,   78,   83,  158,  161,  162,  159,  250,  185,
       83,  163,  160,  176,   85,  164,  101,  165,  251,  166,
      263,   85,   74,  100,   77,  191,  167,   70,   70,   70,
       70,   70,   70,   70,   70,  270,  185,  264,  265,   65,
      176,   67,   67,   67,   67,   67,   67,   67,   67,  796,
      797,  191,  372,  271,  230,  257,   74,   70,   70,   70,
       70,   70,   70,   70,   70,  258,  185,  272,  183,  373,
      183,  273,  177,  184,  184,  184,  184,  184,  184,  184,
      184,  279,   74,   77,   83,  186,   84,  280,  187,  276,
      253,  185,  185,  277,  185,   85,  254,   86,  177,   65,

      255,   72,   72,   72,   72,   72,   72,   67,   67,  204,
       77,  186,  210,  295,  211,  187,   74,   82,  185,  178,
      212,  185,  179,   83,  523,   84,  213,  100,  180,  214,
      181,   81,  524,   83,   85,  100,   86,   83,  185,   84,
      295,  274,   74,  525,   85,  178,  101,  526,   85,  179,
       86,  275,   81,   82,  798,  180,   87,  181,   83,  226,
       84,   82,   83,  309,   84,  185,  227,  799,  803,   85,
      221,   86,  228,   85,  229,   86,   93,   94,  804,  222,
      223,  325,   83,  242,   84,  192,  476,  180,  180,  309,
      243,  296,  204,   85,  297,   86,  295,  244,  295,  293,

      295,  293,  477,  245,  294,  294,  294,  294,  294,  294,
      294,  294,  379,  180,  326,  180,  295,  296,  182,  182,
      805,  297,  376,  295,  380,  295,  377,  295,  184,  184,
      184,  184,  184,  184,  184,  184,  298,  188,  188,  299,
      378,  295,  295,  536,  806,  300,  412,  301,  184,  184,
      184,  184,  184,  184,  184,  184,  415,  807,  303,  416,
      537,  304,  298,  404,  305,  305,  299,  306,  295,  307,
       93,   94,  300,  412,  301,  405,   83,  406,   84,  471,
      407,  472,  424,  415,  303,  808,  416,   85,  304,   86,
      311,  305,  305,  540,  306,  541,  307,  312,  313,  314,

      503,  421,  809,  810,  315,  627,  316,  317,  318,  424,
      300,  319,  422,  504,  628,  423,  320,  505,  412,  321,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  300,  300,  306,  413,
      460,  412,  414,  306,  547,  412,  461,  412,  412,  416,
      548,  416,  462,  530,  491,  463,  464,  617,  204,  496,
      811,  618,  300,  497,  306,  413,  204,  412,  531,  414,
      306,  498,  812,  412,  412,  412,  416,  417,  416,  417,
      813,  814,  418,  418,  418,  418,  418,  418,  418,  418,
      419,  416,  509,  420,  510,  416,  532,  538,  532,  416,

      412,  533,  533,  533,  533,  533,  533,  533,  533,  637,
      511,  731,  815,  816,  817,  732,  419,  416,  773,  818,
      420,  774,  416,  538,  819,  638,  416,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  645,
      740,  800,  820,  821,  822,  823,  824,  801,  802,  825,
      826,  827,  828,  829,  830,  831,  832,  833,  834,  835,
      204,  836,  204,  837,  838,  839,  645,  740,  840,  841,
      842,  846,  847,  848,  849,  850,  204,  851,  852,  853,

      843,  854,  855,  856,  844,  857,  845,  858,  859,  860,
      861,  862,  863,  864,  865,  866,  867,  868,  869,  870,
      204,  871,  872,  204,  873,  204,  204,  874,  875,  876,
      877,  878,  879,  880,  881,  882,  883,  884,  885,  886,
      204,  887,  888,  889,  890,  204,  891,  204,  892,  893,
      894,  895,  896,  897,  898,  899,  139,  900,  901,  902,
      903,  904,  905,  906,  907,  908,  909,  911,  912,  910,
      913,  915,  916,  918,  920,  921,  922,  923,  914,  924,
      925,  926,  927,  928,  919,  929,  930,  931,  917,  932,
      933,  934,  935,  936,  937,  939,  940,  941,  938,  942,

      943,  944,  945,  204,  946,  947,  204,  948,  949,  950,
      951,  952,  953,  954,  955,  956,  957,  958,  204,  959,
      204,  960,  961,  962,  963,  964,  967,  968,  969,  970,
      971,  972,  973,  974,  975,  976,  979,  977,  204,  980,
      965,  966,  978,  981,  982,  983,  984,  985,  986,  987,
      988,  989,  990,  991,  992,  993,  994,  995,  996,  997,
      998,  999, 1000, 1001,  204, 1002, 1003, 1004, 1005, 1006,
     1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1014, 1015,
      204,  204, 1016, 1018, 1019, 1020,  204,  204, 1021, 1017,
     1022,  896, 1023, 1024, 1025, 1026,  139,  139,  139, 1027,

     1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
     1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,  204,
     1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
     1057, 1058, 1059,  204,  204, 1060, 1061, 1062, 1063,  909,
     1064,  204,  204, 1065, 1066, 1067, 1068,  896,  896, 1069,
     1070, 1071, 1072,  204, 1073, 1074, 1075, 1076, 1077, 1078,
      204, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
     1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097,
     1098, 1099,  204,  204, 1100,  204, 1101,  951, 1102, 1103,
     1104,  896, 1105, 1106, 1107,  204, 1108, 1109, 1110, 1111,

     1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,  204,
     1121, 1122, 1123, 1124, 1125,  204, 1126, 1127, 1128, 1129,
     1130, 1131,  204, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
     1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
     1149, 1150, 1151,  204, 1152,  204,  204,  204, 1153, 1154,
     1155, 1156,  896, 1157, 1158, 1159,  204, 1160, 1161, 1162,
     1163, 1164, 1165, 1166, 1167,  204,  204, 1168,  204, 1169,
     1170, 1171, 1172, 1173,  204, 1174, 1175, 1176, 1177, 1178,
     1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
      204, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197,

     1198, 1199, 1194, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
     1207, 1208, 1209, 1208, 1210, 1211, 1212, 1213, 1214, 1215,
     1215,   60,  793,   60,   60,   60,   60,   63,   63,   63,
       63,   63,   63,   67,   67,  792,   67,  189,  189,  189,
      292,  292,  292,  302,  302,  791,  790,  789,  204,  204,
      788,  787,  786,  785,  784,  783,  204,  782,  781,  780,
      779,  778,  777,  776,  775,  772,  771,  770,  769,  768,
      767,  766,  765,  764,  763,  762,  761,  760,  759,  758,
      757,  756,  755,  754,  753,  752,  751,  750,  204,  749,
      748,  747,  746,  745,  744,  139,  743,  742,  741,  739,

      738,  737,  736,  735,  734,  733,  730,  729,  728,  727,
      204,  726,  725,  724,  723,  722,  721,  720,  719,  718,
      717,  716,  715,  714,  713,  712,  711,  710,  709,  708,
      707,  706,  705,  704,  703,  702,  701,  700,  699,  698,
      697,  696,  695,  694,  693,  692,  691,  690,  689,  688,
      687,  686,  685,  684,  683,  204,  682,  681,  680,  679,
      678,  677,  676,  675,  674,  673,  672,  671,  670,  669,
      668,  667,  666,  665,  664,  663,  662,  661,  660,  659,
      658,  657,  204,  656,  655,  654,  653,  652,  651,  650,
      649,  648,  139,  647,  139,  139,  646,  644,  643,  642,

      641,  640,  639,  636,  635,  204,  634,  633,  632,  204,
      631,  630,  629,  626,  625,  624,  623,  622,  621,  620,
      619,  616,  615,  139,  614,  613,  612,  611,  610,  609,
      608,  607,  606,  605,  604,  603,  602,  601,  600,  204,
      204,  599,  598,  597,  596,  595,  594,  593,  592,  591,
      590,  589,  588,  587,  586,  585,  584,  583,  582,  581,
      580,  579,  578,  577,  576,  575,  574,  573,  572,  571,
      570,  569,  568,  567,  566,  565,  564,  563,  562,  561,
      560,  559,  558,  557,  556,  555,  554,  553,  552,  551,
      550,  549,  546,  545,  544,  543,  139,  139,  139,  542,

      139,  539,  535,  534,  529,  528,  527,  204,  522,  521,
      520,  519,  518,  517,  516,  204,  515,  514,  513,  512,
      508,  204,  507,  506,  502,  501,  500,  499,  495,  494,
      493,  492,  490,  489,  488,  487,  486,  485,  484,  483,
      482,  481,  480,  204,  479,  478,  475,  474,  473,  470,
      469,  466,  465,  459,  458,  139,  457,  456,  455,  454,
      453,  452,  204,  451,  450,  449,  448,  445,  444,  443,
      442,  441,  440,  439,  438,  437,  436,  435,  434,  433,
      432,  431,  430,  429,  428,  427,  426,  425,  411,  410,
      409,  408,  403,  139,  402,  401,  400,  399,  398,  397,

      396,  204,  395,  394,  393,  392,  391,  390,  389,  388,
      387,  386,  385,  384,  383,  382,  381,  375,  374,  371,
      370,  369,  368,  367,  366,  365,  204,  364,  363,  362,
      359,  358,  357,  356,  353,  352,  351,  350,  349,  348,
      347,  346,  345,  344,  343,  342,  341,  204,  340,  204,
      339,  204,  338,  337,  336,  335,  334,  333,  332,  331,
      330,  329,  328,  327,  324,  323,  322,  310,  308,  188,
      291,  174,  139,  290,  289,  288,  287,  286,  285,  284,
      283,  282,  281,  278,  269,  266,  262,  261,  260,  259,
      256,  252,  249,  248,  247,  246,  237,  236,  235,  234,

      233,  232,  231,  204,  225,  224,  220,  219,  218,  217,
      209,  208,  207,  206,  205,  204,  203,  202,  201,  200,
      199,  198,   89,  195,  194,   91,  190,   99,  188,  174,
       60,  174,  173,  172,  168,  116,   99,   98,   88,   71,
       64, 1216,    3, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,

     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216
    } ;

static const flex_int16_t yy_chk[1825] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    8,    5,    5,    7,    5,    7,    7,   18,
       18,   18,   18,   18,   18,   18,   18,   24,   24,   30,

       28,   25,   41,   24,  155,   24,   24,   25,   27,   25,
      155,   28,   27,   28,   24,   35,   24,   30,   25,   27,
       25,   27,   41,   35,   35,   30,   73,   73,    8,   15,
       37,   15,   15,   15,   15,   15,   15,   15,   15,   27,
       29,   29,  705,   64,   36,   33,   29,   64,   29,   29,
       15,   33,   36,   33,   15,   36,   39,   29,   36,   29,
       39,   36,   33,   36,   33,   39,   37,   36,   39,   40,
      236,   37,   46,   37,   39,   46,   15,   69,  706,  236,
       40,   15,   20,   68,   20,   20,   20,   20,   20,   20,
       20,   20,   42,   43,   48,   60,   20,   48,   48,   20,

       77,   43,   20,   69,   44,   20,   44,   43,   44,   42,
       68,   20,   44,   20,  102,   96,   20,  102,   44,   42,
       42,  137,   20,   42,   52,   20,   52,   77,   20,   52,
      351,   45,   20,  351,   57,  137,   57,   57,   20,   57,
       20,   60,   96,   20,   21,  117,   21,   21,   21,   21,
       21,   21,   21,   21,   90,  100,   45,   45,  117,   83,
       58,   21,   58,   58,   21,  136,  100,   21,   47,  136,
       83,   45,   83,   21,   47,   21,   45,   45,  231,   66,
       90,  333,   47,   47,   47,   47,  333,   21,   84,   47,
       21,   49,   49,   49,   21,  231,   66,   49,   75,   84,

       21,   84,   21,   92,   49,   50,   50,   49,  144,   75,
      101,   50,   49,   66,   92,   50,   92,   50,  144,   50,
      153,  101,   66,  101,   75,  127,   50,   65,   65,   65,
       65,   65,   65,   65,   65,  157,   75,  153,  153,   67,
       66,   67,   67,   67,   67,   67,   67,   67,   67,  707,
      708,  127,  248,  157,  127,  148,   67,   70,   70,   70,
       70,   70,   70,   70,   70,  148,  186,  158,   74,  248,
       74,  158,   70,   74,   74,   74,   74,   74,   74,   74,
       74,  162,   67,   76,   82,   78,   82,  162,   78,  160,
      146,   76,  186,  160,   78,   82,  146,   82,   70,   72,

      146,   72,   72,   72,   72,   72,   72,   72,   72,  709,
       76,   78,  116,  180,  116,   78,   72,   81,   76,   72,
      116,   78,   72,   81,  405,   81,  116,   86,   72,  116,
       72,   87,  405,   86,   81,   86,   81,   87,  187,   87,
      180,  159,   72,  407,   86,   72,   86,  407,   87,   72,
       87,  159,   93,   93,  710,   72,   94,   72,   93,  125,
       93,   93,   94,  191,   94,  187,  125,  711,  713,   93,
      122,   93,  125,   94,  125,   94,   95,   95,  716,  122,
      122,  199,   95,  138,   95,   95,  358,  178,  179,  191,
      138,  181,  717,   95,  181,   95,  179,  138,  178,  177,

      181,  177,  358,  138,  177,  177,  177,  177,  177,  177,
      177,  177,  252,  178,  199,  179,  296,  181,  182,  182,
      718,  181,  251,  179,  252,  178,  251,  181,  183,  183,
      183,  183,  183,  183,  183,  183,  182,  292,  189,  182,
      251,  297,  296,  423,  719,  182,  300,  182,  184,  184,
      184,  184,  184,  184,  184,  184,  302,  720,  189,  306,
      423,  189,  182,  286,  292,  189,  182,  189,  297,  189,
      192,  192,  182,  300,  182,  286,  192,  286,  192,  354,
      286,  354,  309,  302,  189,  721,  306,  192,  189,  192,
      195,  292,  189,  426,  189,  426,  189,  195,  195,  195,

      386,  308,  722,  723,  195,  518,  195,  195,  195,  309,
      299,  195,  308,  386,  518,  308,  195,  386,  299,  195,
      293,  293,  293,  293,  293,  293,  293,  293,  294,  294,
      294,  294,  294,  294,  294,  294,  298,  299,  303,  301,
      348,  413,  301,  304,  437,  299,  348,  298,  301,  303,
      437,  304,  348,  411,  375,  348,  348,  509,  375,  381,
      724,  509,  298,  381,  303,  301,  375,  413,  411,  301,
      304,  381,  725,  414,  298,  301,  303,  305,  304,  305,
      726,  727,  305,  305,  305,  305,  305,  305,  305,  305,
      307,  419,  391,  307,  391,  420,  415,  424,  415,  307,

      414,  415,  415,  415,  415,  415,  415,  415,  415,  529,
      391,  637,  728,  729,  730,  637,  307,  419,  682,  731,
      307,  682,  420,  424,  732,  529,  307,  417,  417,  417,
      417,  417,  417,  417,  417,  418,  418,  418,  418,  418,
      418,  418,  418,  532,  532,  532,  532,  532,  532,  532,
      532,  533,  533,  533,  533,  533,  533,  533,  533,  538,
      645,  712,  733,  734,  735,  736,  737,  712,  712,  738,
      739,  741,  742,  743,  744,  745,  746,  747,  748,  749,
      750,  751,  752,  753,  754,  755,  538,  645,  756,  757,
      758,  759,  760,  761,  762,  763,  764,  765,  766,  769,

      758,  770,  771,  772,  758,  773,  758,  774,  775,  777,
      778,  779,  780,  781,  782,  783,  784,  785,  786,  787,
      788,  789,  791,  792,  793,  794,  795,  796,  797,  798,
      799,  800,  801,  802,  803,  804,  805,  806,  807,  808,
      809,  810,  811,  812,  813,  814,  815,  816,  820,  821,
      822,  823,  824,  825,  826,  827,  828,  829,  830,  831,
      832,  833,  834,  835,  836,  837,  838,  839,  840,  838,
      842,  843,  844,  845,  846,  847,  848,  849,  842,  850,
      851,  852,  853,  854,  845,  855,  856,  857,  844,  858,
      859,  860,  861,  863,  864,  865,  866,  867,  864,  868,

      869,  870,  872,  873,  874,  875,  876,  877,  878,  879,
      880,  881,  882,  883,  884,  885,  887,  888,  889,  890,
      891,  893,  894,  895,  897,  898,  899,  900,  901,  902,
      903,  904,  905,  906,  907,  908,  910,  909,  911,  912,
      898,  898,  909,  913,  914,  915,  916,  917,  918,  919,
      921,  922,  923,  924,  925,  926,  927,  928,  929,  930,
      931,  932,  933,  934,  935,  936,  937,  938,  939,  940,
      941,  942,  943,  944,  946,  947,  948,  949,  950,  952,
      953,  953,  954,  955,  956,  957,  958,  959,  960,  954,
      961,  962,  963,  964,  965,  966,  967,  968,  969,  970,

      971,  972,  973,  974,  975,  976,  977,  978,  979,  980,
      981,  982,  983,  984,  985,  986,  988,  989,  990,  991,
      993,  994,  995,  996,  997,  998,  999, 1000, 1001, 1002,
     1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
     1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
     1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
     1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046,
     1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057,
     1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
     1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,

     1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
     1089, 1090, 1091, 1092, 1093, 1094, 1095, 1097, 1098, 1099,
     1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109,
     1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120,
     1121, 1122, 1123, 1124, 1126, 1127, 1128, 1129, 1130, 1131,
     1132, 1133, 1134, 1136, 1137, 1138, 1139, 1140, 1141, 1143,
     1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154,
     1155, 1156, 1157, 1158, 1159, 1160, 1161, 1164, 1166, 1167,
     1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1177, 1178,
     1180, 1181, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190,

     1191, 1192, 1193, 1195, 1196, 1197, 1198, 1200, 1201, 1202,
     1203, 1205, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1214,
     1215, 1217,  704, 1217, 1217, 1217, 1217, 1218, 1218, 1218,
     1218, 1218, 1218, 1219, 1219,  703, 1219, 1220, 1220, 1220,
     1221, 1221, 1221, 1222, 1222,  702,  701,  700,  699,  698,
      697,  696,  695,  694,  693,  692,  691,  690,  689,  688,
      687,  686,  685,  684,  683,  681,  680,  679,  678,  677,
      674,  673,  672,  671,  670,  669,  668,  667,  666,  665,
      664,  663,  662,  661,  660,  659,  658,  657,  656,  655,
      654,  653,  652,  651,  650,  649,  648,  647,  646,  644,

      643,  642,  641,  640,  639,  638,  635,  634,  633,  631,
      630,  629,  628,  627,  626,  625,  624,  623,  622,  621,
      620,  619,  618,  617,  615,  614,  613,  612,  611,  610,
      609,  608,  607,  606,  605,  603,  601,  600,  599,  598,
      597,  596,  595,  594,  593,  592,  590,  589,  588,  587,
      586,  585,  584,  583,  582,  581,  580,  579,  578,  577,
      576,  575,  574,  573,  572,  571,  570,  569,  568,  567,
      565,  564,  563,  562,  561,  560,  559,  558,  557,  556,
      555,  554,  553,  552,  551,  550,  549,  548,  547,  546,
      545,  544,  543,  542,  541,  540,  539,  537,  536,  535,

      534,  531,  530,  528,  527,  526,  525,  524,  523,  522,
      521,  520,  519,  517,  516,  515,  514,  513,  512,  511,
      510,  508,  507,  506,  505,  504,  503,  502,  501,  500,
      499,  498,  497,  496,  495,  494,  493,  492,  491,  490,
      489,  488,  487,  486,  485,  484,  483,  482,  481,  480,
      479,  478,  477,  476,  475,  474,  473,  472,  471,  470,
      469,  468,  467,  466,  465,  464,  463,  462,  461,  460,
      459,  458,  457,  456,  455,  454,  453,  452,  451,  450,
      449,  448,  447,  446,  445,  444,  443,  442,  441,  440,
      439,  438,  435,  434,  433,  432,  431,  430,  429,  428,

      427,  425,  422,  421,  410,  409,  408,  406,  404,  402,
      401,  400,  399,  398,  397,  396,  395,  394,  393,  392,
      390,  389,  388,  387,  385,  384,  383,  382,  380,  379,
      377,  376,  374,  373,  372,  371,  370,  369,  368,  367,
      366,  363,  362,  361,  360,  359,  357,  356,  355,  353,
      352,  350,  349,  347,  346,  345,  344,  343,  342,  341,
      340,  339,  338,  337,  336,  335,  334,  332,  330,  329,
      328,  327,  326,  325,  324,  323,  322,  321,  320,  319,
      318,  317,  316,  315,  314,  313,  312,  311,  291,  290,
      289,  287,  285,  284,  283,  281,  277,  276,  275,  274,

      273,  271,  270,  269,  265,  264,  263,  262,  261,  260,
      259,  258,  257,  256,  255,  254,  253,  250,  249,  247,
      246,  245,  244,  243,  242,  241,  240,  239,  238,  237,
      235,  234,  233,  232,  230,  229,  228,  227,  226,  225,
      224,  223,  222,  221,  220,  219,  218,  217,  216,  215,
      214,  213,  212,  211,  210,  209,  208,  207,  206,  205,
      203,  202,  201,  200,  198,  197,  196,  194,  190,  176,
      175,  174,  173,  172,  171,  170,  169,  168,  167,  166,
      165,  164,  163,  161,  156,  154,  152,  151,  150,  149,
      147,  145,  143,  142,  141,  140,  135,  134,  133,  132,

      131,  130,  129,  126,  124,  123,  121,  120,  119,  118,
      115,  114,  113,  111,  110,  109,  108,  107,  106,  105,
      104,  103,   99,   98,   97,   89,   88,   85,   79,   63,
       62,   59,   54,   53,   51,   38,   32,   31,   26,   19,
        9,    3, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,

     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
/*
 * avrdude - A Downloader/Uploader for AVR device programmers
 * Copyright (C) 2000-2004  Brian S. Dean <bsd@bdmicro.com>
 * Copyright (C) 2006 Joerg Wunsch <j@uriah.heep.sax.de>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
/* $Id$ */
#line 23 "lexer.l"
#include <math.h>
#include <string.h>
#include <errno.h>
#include <limits.h>
#include <sys/types.h>
#include <sys/stat.h>

#include "ac_cfg.h"
#include "avrdude.h"
#include "libavrdude.h"
#include "config.h"

#include "config_gram.h"

#ifndef YYERRCODE
#define YYERRCODE 256
#endif

/* capture lvalue keywords to associate comments with that assignment */
#define ccap() capture_lvalue_kw(yytext, cfg_lineno)

static void adjust_cfg_lineno(const char *p) {
  while(*p)
    if(*p++ == '\n')
      cfg_lineno++;
}

#line 1298 "lexer.cpp"
#line 53 "lexer.l"
  // AVRDUDE integer size suffix (LL/L/S/H/HH)
 // AVRDUDE integer suffix incl unsigned designator
 // Non-negative integers
 // Octal integers
 // Binary integers
 // Hexadecimal integers - fractional hexadecimals are treated below
 // Real numbers (decimal and hexadecimal fractional numbers)
/* Bump resources for classic lex. */
#line 1308 "lexer.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 82 "lexer.l"


#line 1526 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1217 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1743 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 84 "lexer.l"
{ /* sign is treated in grammar */
  yylval = new_number(yytext);
  if(!yylval)
    return YYERRCODE;

  return TKN_NUMBER;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 92 "lexer.l"
{
  yylval = new_number_real(yytext);
  if(!yylval)
    return YYERRCODE;

  return TKN_NUMBER_REAL;
}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 100 "lexer.l"
{
  char *str= cfg_strdup("lexer.l", yytext);
  cfg_unescape(str, str+1);
  size_t len = strlen(str);
  if(len)
    str[len-1] = 0;
  yylval = new_string(str);
  free(str);
  return TKN_STRING;
}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 111 "lexer.l"
{ /* Record comments so far as prologue and skip */
  cfg_capture_prologue();
  adjust_cfg_lineno(yytext);
}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 116 "lexer.l"
{ /* Ignore part definions header */
  adjust_cfg_lineno(yytext);
}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 120 "lexer.l"
{ /* Record and skip # comments including preceding white space */
  capture_comment_str(yytext, cfg_lineno);
  adjust_cfg_lineno(yytext);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 125 "lexer.l"
{  /* The following eats multiline C style comments, they are not captured */
        int c;
        int comment_start;

        comment_start = cfg_lineno;
        while (1) {
          while (((c = yyinput()) != '*') && (c != EOF)) {
            /* eat up text of comment, but keep counting lines */
            if (c == '\n')
              cfg_lineno++;
          }

          if (c == '*') {
            while ((c = yyinput()) == '*')
              ;
            if (c == '/')
              break;    /* found the end */
          }

          if (c == EOF) {
            yyerror("EOF in comment (started on line %d)", comment_start);
            return YYERRCODE;
          }
        }
     }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 161 "lexer.l"
{
  /* struct components for PROGRAMMER, AVRPART and AVRMEM */
  Component_t *cp = cfg_comp_search(yytext, current_strct);
  if(!cp) {
    yyerror("unknown component %s in %s", yytext, cfg_strct_name(current_strct));
    return YYERRCODE;
  }
  yylval = new_token(TKN_COMPONENT);
  yylval->value.comp = cp;
  ccap();
  return TKN_COMPONENT;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 177 "lexer.l"
{ /* Constants */
  yylval = new_constant(yytext);
  return TKN_NUMBER;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 182 "lexer.l"
{ yylval=NULL; return K_ALIAS; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 183 "lexer.l"
{ yylval=NULL; return K_ALLOW_SUBSHELLS; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 184 "lexer.l"
{ yylval=NULL; ccap(); return K_ALLOWFULLPAGEBITSTREAM; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 185 "lexer.l"
{ yylval=NULL; return K_AVRDUDE_CONF_VERSION; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 186 "lexer.l"
{ yylval=NULL; ccap(); return K_BUFF; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 187 "lexer.l"
{ yylval=new_token(K_CHIP_ERASE); ccap(); return K_CHIP_ERASE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 188 "lexer.l"
{ yylval=NULL; ccap(); return K_CONNTYPE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 189 "lexer.l"
{ yylval=new_token(K_DEDICATED); return K_DEDICATED; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 190 "lexer.l"
{ yylval=NULL; return K_DEFAULT_BAUDRATE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 191 "lexer.l"
{ yylval=NULL; return K_DEFAULT_BITCLOCK; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 192 "lexer.l"
{ yylval=NULL; return K_DEFAULT_PARALLEL; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 193 "lexer.l"
{ yylval=NULL; return K_DEFAULT_PROGRAMMER; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 194 "lexer.l"
{ yylval=NULL; return K_DEFAULT_SERIAL; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 195 "lexer.l"
{ yylval=NULL; return K_DEFAULT_SPI; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 196 "lexer.l"
{ yylval=NULL; return K_DEFAULT_LINUXGPIO; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 197 "lexer.l"
{ yylval=NULL; ccap(); return K_DEVICECODE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 198 "lexer.l"
{ yylval=NULL; return K_EEPROM; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 199 "lexer.l"
{ yylval=NULL; ccap(); return K_EEPROM_INSTR; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 200 "lexer.l"
{ yylval=NULL; ccap(); return K_ENABLEPAGEPROGRAMMING; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 201 "lexer.l"
{ yylval=NULL; ccap(); return K_ERRLED; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 202 "lexer.l"
{ yylval=NULL; return K_FLASH; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 203 "lexer.l"
{ yylval=NULL; ccap(); return K_FLASH_INSTR; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 204 "lexer.l"
{ yylval=NULL; ccap(); return K_HAS_DW; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 205 "lexer.l"
{ yylval=NULL; ccap(); return K_HAS_JTAG; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 206 "lexer.l"
{ yylval=NULL; ccap(); return K_HAS_PDI; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 207 "lexer.l"
{ yylval=NULL; ccap(); return K_HAS_TPI; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 208 "lexer.l"
{ yylval=NULL; ccap(); return K_HAS_UPDI; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 209 "lexer.l"
{ yylval=NULL; ccap(); return K_HVSP_CONTROLSTACK; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 210 "lexer.l"
{ yylval=NULL; ccap(); return K_HVUPDI_SUPPORT; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 211 "lexer.l"
{ yylval=NULL; ccap(); return K_ID; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 212 "lexer.l"
{ yylval=new_token(K_IO); return K_IO; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 213 "lexer.l"
{ yylval=NULL; ccap(); return K_IS_AT90S1200; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 214 "lexer.l"
{ yylval=NULL; ccap(); return K_IS_AVR32; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 215 "lexer.l"
{ yylval=NULL; ccap(); return K_LINUXGPIO; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 216 "lexer.l"
{ yylval=new_token(K_LOAD_EXT_ADDR); ccap(); return K_LOAD_EXT_ADDR; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 217 "lexer.l"
{ yylval=new_token(K_LOADPAGE_HI); ccap(); return K_LOADPAGE_HI; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 218 "lexer.l"
{ yylval=new_token(K_LOADPAGE_LO); ccap(); return K_LOADPAGE_LO; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 219 "lexer.l"
{ yylval=NULL; ccap(); current_strct = COMP_AVRMEM; return K_MEMORY; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 220 "lexer.l"
{ yylval=NULL; ccap(); yywarning("miso is deprecated, will be removed in v8.0, use sdi"); return K_SDI; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 221 "lexer.l"
{ yylval=NULL; ccap(); yywarning("mosi is deprecated, will be removed in v8.0, use sdo"); return K_SDO; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 222 "lexer.l"
{ yylval=NULL; return K_NULL; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 223 "lexer.l"
{ yylval=NULL; ccap(); return K_PAGE_SIZE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 224 "lexer.l"
{ yylval=NULL; ccap(); return K_PARALLEL; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 225 "lexer.l"
{ yylval=NULL; return K_PARENT; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 226 "lexer.l"
{ yylval=NULL; ccap(); current_strct = COMP_AVRPART; return K_PART; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 227 "lexer.l"
{ yylval=new_token(K_PGM_ENABLE); ccap(); return K_PGM_ENABLE; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 228 "lexer.l"
{ yylval=NULL; ccap(); return K_PGMLED; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 229 "lexer.l"
{ yylval=NULL; ccap(); return K_PP_CONTROLSTACK; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 230 "lexer.l"
{ yylval=NULL; ccap(); current_strct = COMP_PROGRAMMER; return K_PROGRAMMER; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 231 "lexer.l"
{ yylval=NULL; ccap(); return K_RDYLED; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 232 "lexer.l"
{ yylval=new_token(K_READ); ccap(); return K_READ; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 233 "lexer.l"
{ yylval=new_token(K_READ_HI); ccap(); return K_READ_HI; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 234 "lexer.l"
{ yylval=new_token(K_READ_LO); ccap(); return K_READ_LO; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 235 "lexer.l"
{ yylval=NULL; ccap(); return K_READBACK; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 236 "lexer.l"
{ yylval=new_token(K_RESET); ccap(); return K_RESET; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 237 "lexer.l"
{ yylval=NULL; ccap(); return K_RETRY_PULSE; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 238 "lexer.l"
{ yylval=new_token(K_SCK); ccap(); return K_SCK; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 239 "lexer.l"
{ yylval=NULL; ccap(); return K_SDI; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 240 "lexer.l"
{ yylval=NULL; ccap(); return K_SDO; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 241 "lexer.l"
{ yylval=NULL; ccap(); return K_SERIAL; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 242 "lexer.l"
{ yylval=NULL; ccap(); return K_SIGNATURE; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 243 "lexer.l"
{ yylval=NULL; return K_SPI; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 244 "lexer.l"
{ yylval=NULL; ccap(); return K_TCK; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 245 "lexer.l"
{ yylval=NULL; ccap(); return K_TDI; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 246 "lexer.l"
{ yylval=NULL; ccap(); return K_TDO; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 247 "lexer.l"
{ yylval=NULL; ccap(); return K_TMS; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 248 "lexer.l"
{ yylval=NULL; ccap(); return K_TYPE; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 249 "lexer.l"
{ yylval=NULL; return K_USB; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 250 "lexer.l"
{ yylval=NULL; ccap(); return K_USBPID; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 251 "lexer.l"
{ yylval=NULL; ccap(); return K_VARIANTS; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 252 "lexer.l"
{ yylval=NULL; ccap(); return K_VCC; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 253 "lexer.l"
{ yylval=NULL; ccap(); return K_VFYLED; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 254 "lexer.l"
{ yylval=new_token(K_WRITE); ccap(); return K_WRITE; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 255 "lexer.l"
{ yylval=new_token(K_WRITE_HI); ccap(); return K_WRITE_HI; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 256 "lexer.l"
{ yylval=new_token(K_WRITE_LO); ccap(); return K_WRITE_LO; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 257 "lexer.l"
{ yylval=new_token(K_WRITEPAGE); ccap(); return K_WRITEPAGE; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 259 "lexer.l"
{ yylval = NULL; pyytext(); return TKN_COMMA; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 260 "lexer.l"
{ yylval = NULL; pyytext(); return TKN_EQUAL; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 261 "lexer.l"
{ yylval = NULL; pyytext(); return TKN_SEMI; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 263 "lexer.l"
{ yylval = NULL; pyytext(); return OP_OR; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 264 "lexer.l"
{ yylval = NULL; pyytext(); return OP_XOR; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 265 "lexer.l"
{ yylval = NULL; pyytext(); return OP_AND; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 266 "lexer.l"
{ yylval = NULL; pyytext(); return OP_PLUS; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 267 "lexer.l"
{ yylval = NULL; pyytext(); return OP_MINUS; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 268 "lexer.l"
{ yylval = NULL; pyytext(); return OP_TIMES; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 269 "lexer.l"
{ yylval = NULL; pyytext(); return OP_DIVIDE; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 270 "lexer.l"
{ yylval = NULL; pyytext(); return OP_MODULO; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 271 "lexer.l"
{ yylval = NULL; pyytext(); return OP_TILDE; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 273 "lexer.l"
{ yylval = NULL; pyytext(); return TKN_LEFT_PAREN; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 274 "lexer.l"
{ yylval = NULL; pyytext(); return TKN_RIGHT_PAREN; }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 276 "lexer.l"
{ cfg_lineno++; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 277 "lexer.l"
{ /* ignore whitespace */ }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 279 "lexer.l"
{ yyerror("possible old-style config file entry\n"
             "  Update your config file (see "
               "/avrdude.conf.sample for a sample)");
     return YYERRCODE; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 284 "lexer.l"
{ yyerror("unknown token");
     return YYERRCODE; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 286 "lexer.l"
ECHO;
	YY_BREAK
#line 2179 "lexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1217 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1217 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1216);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 286 "lexer.l"


